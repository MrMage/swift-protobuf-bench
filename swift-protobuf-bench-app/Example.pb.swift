// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: swift-protobuf-bench-app/Example.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Wrapper1: SwiftProtobuf.Message {
  static let protoMessageName: String = "Wrapper1"

  var container: Container {
    get {return _storage._container ?? Container()}
    set {_uniqueStorage()._container = newValue}
  }
  /// Returns true if `container` has been explicitly set.
  var hasContainer: Bool {return _storage._container != nil}
  /// Clears the value of `container`. Subsequent reads from it will return its default value.
  mutating func clearContainer() {_storage._container = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._container)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._container {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Wrapper1_Fast: SwiftProtobuf.Message {
  static let protoMessageName: String = "Wrapper1_Fast"

  var container: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.container)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.container.isEmpty {
      try visitor.visitSingularBytesField(value: self.container, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Container: SwiftProtobuf.Message {
  static let protoMessageName: String = "Container"

  var entry: [Container.Entry] {
    get {return _storage._entry}
    set {_uniqueStorage()._entry = newValue}
  }

  var extra: Container.Entry {
    get {return _storage._extra ?? Container.Entry()}
    set {_uniqueStorage()._extra = newValue}
  }
  /// Returns true if `extra` has been explicitly set.
  var hasExtra: Bool {return _storage._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
  mutating func clearExtra() {_storage._extra = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Entry: SwiftProtobuf.Message {
    static let protoMessageName: String = Container.protoMessageName + ".Entry"

    var double1: Double {
      get {return _storage._double1}
      set {_uniqueStorage()._double1 = newValue}
    }

    var message1: Container.Entry.SubMessage {
      get {return _storage._message1 ?? Container.Entry.SubMessage()}
      set {_uniqueStorage()._message1 = newValue}
    }
    /// Returns true if `message1` has been explicitly set.
    var hasMessage1: Bool {return _storage._message1 != nil}
    /// Clears the value of `message1`. Subsequent reads from it will return its default value.
    mutating func clearMessage1() {_storage._message1 = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct SubMessage: SwiftProtobuf.Message {
      static let protoMessageName: String = Container.Entry.protoMessageName + ".SubMessage"

      var int1: Int64 {
        get {return _storage._int1}
        set {_uniqueStorage()._int1 = newValue}
      }

      var double1: Double {
        get {return _storage._double1}
        set {_uniqueStorage()._double1 = newValue}
      }

      var double2: Double {
        get {return _storage._double2}
        set {_uniqueStorage()._double2 = newValue}
      }

      var int2: Int64 {
        get {return _storage._int2}
        set {_uniqueStorage()._int2 = newValue}
      }

      var int3: Int64 {
        get {return _storage._int3}
        set {_uniqueStorage()._int3 = newValue}
      }

      var int4: Int64 {
        get {return _storage._int4}
        set {_uniqueStorage()._int4 = newValue}
      }

      var int5: Int64 {
        get {return _storage._int5}
        set {_uniqueStorage()._int5 = newValue}
      }

      var extra: Wrapper1_Fast {
        get {return _storage._extra ?? Wrapper1_Fast()}
        set {_uniqueStorage()._extra = newValue}
      }
      /// Returns true if `extra` has been explicitly set.
      var hasExtra: Bool {return _storage._extra != nil}
      /// Clears the value of `extra`. Subsequent reads from it will return its default value.
      mutating func clearExtra() {_storage._extra = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
          while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularSFixed64Field(value: &_storage._int1)
            case 2: try decoder.decodeSingularDoubleField(value: &_storage._double1)
            case 3: try decoder.decodeSingularDoubleField(value: &_storage._double2)
            case 4: try decoder.decodeSingularInt64Field(value: &_storage._int2)
            case 5: try decoder.decodeSingularInt64Field(value: &_storage._int3)
            case 6: try decoder.decodeSingularInt64Field(value: &_storage._int4)
            case 7: try decoder.decodeSingularSFixed64Field(value: &_storage._int5)
            case 8: try decoder.decodeSingularMessageField(value: &_storage._extra)
            default: break
            }
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
          if _storage._int1 != 0 {
            try visitor.visitSingularSFixed64Field(value: _storage._int1, fieldNumber: 1)
          }
          if _storage._double1 != 0 {
            try visitor.visitSingularDoubleField(value: _storage._double1, fieldNumber: 2)
          }
          if _storage._double2 != 0 {
            try visitor.visitSingularDoubleField(value: _storage._double2, fieldNumber: 3)
          }
          if _storage._int2 != 0 {
            try visitor.visitSingularInt64Field(value: _storage._int2, fieldNumber: 4)
          }
          if _storage._int3 != 0 {
            try visitor.visitSingularInt64Field(value: _storage._int3, fieldNumber: 5)
          }
          if _storage._int4 != 0 {
            try visitor.visitSingularInt64Field(value: _storage._int4, fieldNumber: 6)
          }
          if _storage._int5 != 0 {
            try visitor.visitSingularSFixed64Field(value: _storage._int5, fieldNumber: 7)
          }
          if let v = _storage._extra {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
          }
        }
        try unknownFields.traverse(visitor: &visitor)
      }

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularDoubleField(value: &_storage._double1)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._message1)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._double1 != 0 {
          try visitor.visitSingularDoubleField(value: _storage._double1, fieldNumber: 1)
        }
        if let v = _storage._message1 {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._entry)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._extra)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._entry.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._entry, fieldNumber: 1)
      }
      if let v = _storage._extra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Wrapper1: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding, SwiftProtobuf._MessageSizeCaching {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "container"),
  ]

  fileprivate class _StorageClass {
    var _container: Container? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _container = source._container
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var _messageSizeCacheKey: UnsafeMutableRawPointer? {
    return Unmanaged.passUnretained(_storage).toOpaque()
  }

  func _protobuf_generated_isEqualTo(other: Wrapper1) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._container != other_storage._container {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Wrapper1_Fast: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding, SwiftProtobuf._MessageSizeCaching {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "container"),
  ]

  public var _messageSizeCacheKey: UnsafeMutableRawPointer? {
    return nil
  }

  func _protobuf_generated_isEqualTo(other: Wrapper1_Fast) -> Bool {
    if self.container != other.container {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Container: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding, SwiftProtobuf._MessageSizeCaching {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "entry"),
    2: .same(proto: "extra"),
  ]

  fileprivate class _StorageClass {
    var _entry: [Container.Entry] = []
    var _extra: Container.Entry? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _entry = source._entry
      _extra = source._extra
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var _messageSizeCacheKey: UnsafeMutableRawPointer? {
    return Unmanaged.passUnretained(_storage).toOpaque()
  }

  func _protobuf_generated_isEqualTo(other: Container) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._entry != other_storage._entry {return false}
        if _storage._extra != other_storage._extra {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Container.Entry: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding, SwiftProtobuf._MessageSizeCaching {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "double1"),
    2: .same(proto: "message1"),
  ]

  fileprivate class _StorageClass {
    var _double1: Double = 0
    var _message1: Container.Entry.SubMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _double1 = source._double1
      _message1 = source._message1
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var _messageSizeCacheKey: UnsafeMutableRawPointer? {
    return Unmanaged.passUnretained(_storage).toOpaque()
  }

  func _protobuf_generated_isEqualTo(other: Container.Entry) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._double1 != other_storage._double1 {return false}
        if _storage._message1 != other_storage._message1 {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Container.Entry.SubMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding, SwiftProtobuf._MessageSizeCaching {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "int1"),
    2: .same(proto: "double1"),
    3: .same(proto: "double2"),
    4: .same(proto: "int2"),
    5: .same(proto: "int3"),
    6: .same(proto: "int4"),
    7: .same(proto: "int5"),
    8: .same(proto: "extra"),
  ]

  fileprivate class _StorageClass {
    var _int1: Int64 = 0
    var _double1: Double = 0
    var _double2: Double = 0
    var _int2: Int64 = 0
    var _int3: Int64 = 0
    var _int4: Int64 = 0
    var _int5: Int64 = 0
    var _extra: Wrapper1_Fast? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _int1 = source._int1
      _double1 = source._double1
      _double2 = source._double2
      _int2 = source._int2
      _int3 = source._int3
      _int4 = source._int4
      _int5 = source._int5
      _extra = source._extra
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var _messageSizeCacheKey: UnsafeMutableRawPointer? {
    return Unmanaged.passUnretained(_storage).toOpaque()
  }

  func _protobuf_generated_isEqualTo(other: Container.Entry.SubMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._int1 != other_storage._int1 {return false}
        if _storage._double1 != other_storage._double1 {return false}
        if _storage._double2 != other_storage._double2 {return false}
        if _storage._int2 != other_storage._int2 {return false}
        if _storage._int3 != other_storage._int3 {return false}
        if _storage._int4 != other_storage._int4 {return false}
        if _storage._int5 != other_storage._int5 {return false}
        if _storage._extra != other_storage._extra {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
